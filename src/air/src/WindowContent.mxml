<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
               xmlns:s="library://ns.adobe.com/flex/spark" 
               xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:local="*"
			   xmlns:ui="ui.*"
			   creationComplete="init()">
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
		<fx:XMLList id="menuXML">
			<menu label="File">
				<item id="newinstance" label="New Window" />
				<item id="channels" label="Channels" />
				<item id="exit" label="Exit" />
			</menu>
			<menu label="View">
				<item id="ontop" label="Always On Top" type="check" />
				<item id="sizeSmall" label="Small" />
				<item id="sizeMed" label="Medium" />
				<item id="sizeLarge" label="Large" />
				<item id="sizeFullscreen" label="Fullscreen" />
			</menu>
			<menu label="Tools">
				<item id="showchat" label="IRC Chat" />
				<item id="help" label="Help" />
			</menu>
		</fx:XMLList>
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import flash.display.NativeWindow;
			import flash.events.KeyboardEvent;
			import flash.ui.Keyboard;
			import flash.net.URLRequest;
			import flash.sampler.DeleteObjectSample;
			import flash.utils.Timer;
			import mx.core.IRawChildrenContainer;
			import mx.events.MenuEvent;
			
			import mx.events.ResizeEvent;
			
			private static const defaultWindowTitle:String = "BBViewer";
			private var nativeWindow:ExtendedNativeWindow;
			private var disableHotkeys:Boolean = false;

			private function init():void
			{
				stage.color = 0x000000;
				stage.addEventListener( KeyboardEvent.KEY_UP, onKeyUp );
			}
			
			private function onMenuItemClick(event:MenuEvent):void
			{
				//File menu
				if ( event.item.@id == "newinstance" ) Main.createNativeWindow( stage.nativeWindow.x - 20, stage.nativeWindow.y - 20 );
				if ( event.item.@id == "channels" ) showChannels();
				if ( event.item.@id == "exit" ) exitApp();
				//View menu
				if ( event.item.@id == "sizeSmall" ) setFixedSize(360, 203);
				if ( event.item.@id == "sizeMed" ) setFixedSize(480, 270);
				if ( event.item.@id == "sizeLarge" ) setFixedSize(640, 360);
				if ( event.item.@id == "sizeFullscreen" ) toggleFullscreen();
				if ( event.item.@id == "ontop" ) toggleAlwaysOnTop();
				if ( event.item.@id == "showchat" ) toggleChat();
				
				//Tools menu
				if ( event.item.@id == "help" ) showHelp();
            }
			
			private function onKeyUp( event:KeyboardEvent ):void
			{
				if ( !disableHotkeys )
				{
					if ( event.keyCode == Keyboard.ESCAPE ) toggleControls();
				}
			}
			
			private function setFixedSize(w:Number, h:Number):void
			{
				//set the window to a fixed size
				var chromeWidth:Number = this.stage.nativeWindow.width - this.stage.stageWidth;
				var chromeHeight:Number = this.stage.nativeWindow.height - this.stage.stageHeight;
				stage.nativeWindow.width = w + chromeWidth;
				stage.nativeWindow.height = h + chromeHeight;
			}

			public function toggleAlwaysOnTop():void
			{
				stage.nativeWindow.alwaysInFront = !stage.nativeWindow.alwaysInFront;
			}
			
			public function toggleControls():void
			{
				playerControls.visible = !playerControls.visible;
				appMenu.visible = !appMenu.visible
			}
			public function toggleSettings():void
			{
				playerSettings.visible = !playerSettings.visible;
			}
			
			public function toggleFullscreen():void
			{
				if (stage.displayState == StageDisplayState.NORMAL)
				{
					stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
				} else
				{
					stage.displayState = StageDisplayState.NORMAL;
				}
			}
			
			public function toggleChat():void
			{
				chat.visible = !chat.visible;
			}
			
			private function showChannels():void
			{
				channels.visible = true;
			}
			
			private function showHelp():void
			{
				help.visible = true;
			}
			
			private function exitApp():void
			{
				stage.nativeWindow.close();
			}
			
			public function setWindow(window:ExtendedNativeWindow):void
			{
				//update the native window for this window content
				nativeWindow = window;
				nativeWindow.title = defaultWindowTitle;
			}
			
		]]>
	</fx:Script>
	<local:VideoView id="video" width="100%" height="100%" />
	<!-- Still a ways to go, just the basic stuff is there -->
	<ui:Chat id="chat" width="33%" height="100%" visible="false" />
	<ui:Controls id="playerControls" width="100%" bottom="0" />
	<ui:Settings id="playerSettings" bottom="61" right="10" visible="false" />
	<ui:Help id="help" verticalCenter="1" horizontalCenter="1" top="30" visible="false" />
	<ui:Channels id="channels" verticalCenter="1" horizontalCenter="1" top="30" visible="false" />
	<mx:MenuBar x="0" y="0" width="100%" id="appMenu" labelField="@label" itemClick="onMenuItemClick(event)" dataProvider="{menuXML}" />
	
</s:Group>